/* 1.1  Filter products by color, size and product number
Retrieve the ProductID, ProductNumber and Name of the products, 
that must have Product number begins with 'BK-' followed by any character other than 'T' and ends with a '-' followed by any two numerals. 
And satisfy one of the following conditions:
color of black, red, or white 
size is S or M and */

select productid
, Productnumber
, size
, color,
name
from saleslt.product
where 
(productnumber like 'BK-%[^K]%-[0-9][0-9]')
and
(color in ('black','red','white') or size in ('s','m'))

/*1.2  Retrieve specific products by product ID 
Retrieve the product ID, product number, name, and list price of products whose product name contains "HL " or "Mountain",
product number is at least 8 characters and never have been ordered.*/

SELECT ProductID
, ProductNumber
, Name
, ListPrice 
FROM salesLT.product
WHERE ProductNumber LIKE '%HL%' OR ProductNumber LIKE '%Mountain%'
  AND Name LIKE '_______%' 
  AND ProductID NOT IN
      (SELECT ProductID 
        FROM SalesLT.SalesOrderDetail)



/*2.1 Retrieve customer orders with addresses
Extend your customer orders query to include the Main Office address for each customer, 
including the full street address, city, state or province, postal code, and country or region.*/

select 
SalesOrderID
, TotalDue
, CompanyName
, Addressline1
, City
, StateProvince
, PostalCode
, CountryRegion
from SalesLT.SalesOrderHeader as Header
inner join SalesLT.Customer as Cus
on Header.CustomerID = Cus.CustomerID
inner join SalesLT.CustomerAddress as CusAdd
on Cus.CustomerID = CusAdd.CustomerID
inner join SalesLT.Address as Adre
on CusAdd.AddressID = Adre.AddressID
Where CusAdd.AddressType = 'Main Office'


/*2.2 Retrieve a list of products
○ A sales manager needs a list of ordered product with more information. 
You must write a query that returns a list of product name (is generated by the string preceded by the '-' character 
(example: HL Road Frame)), only started selling in 2006, Product model name contains "Road", 
CategoryName contains "Bikes" and  ListPrice value with integer part equal to 2443*/

select 
Left (pro.Name, CHARINDEX('-',pro.name)-1) as Pro_Name
, pro.name
, year (SellStartDate) AS year
, ProCate.Name
, Listprice
from salesLT.product as pro
inner join salesLT.productCategory as ProCate
on pro.productCategoryID = ProCate.productCategoryID
Where pro.name like '%-%'
and (year (SellStartDate) = 2006)
and pro.name like '%Road%'
and ProCate.Name like '%Bikes%'
and ListPrice like '2443.%'

 /*2.3  Retrieve a report that includes the following information: customer_id, transaction_id, scenario_id, 
 transaction_type, sub_category, category. These transactions must meet the following conditions: 
Were created in Jan 2019 
Transaction type is not payment. */

select 
customer_id
, transaction_id
, Scen.scenario_id
, transaction_type
, sub_category
, category
from dbo.dim_scenario as Scen
inner join dbo.fact_transaction_2019 as Tran_19
on Scen.scenario_id = Tran_19.scenario_id
where 
month (Tran_19.transaction_time) = '01'
and sub_category = 'Not Payment'

/* 2.4 Retrieve a report that includes the following information: customer_id, 
transaction_id, scenario_id, transaction_type, category, payment_method. 
These transactions must meet the following conditions: 
Were created from Jan to June 2019
Had category type is shopping
Were paid by Bank account*/

select 
customer_id
, transaction_id
, Scen.scenario_id
, transaction_type
, category
, payment_method
from dbo.dim_scenario as Scen
inner join dbo.fact_transaction_2019 as Tran_19
on Scen.scenario_id = Tran_19.scenario_id
inner join dbo.dim_payment_channel as Pay
on Tran_19.payment_channel_id = pay.payment_channel_id
where
month (Tran_19.transaction_time) BETWEEN 01 and 07
and category = 'shopping'
and payment_method = 'Bank account'

/*2.5 Retrieve a report that includes the following information: 
customer_id, transaction_id, scenario_id, payment_method and payment_platform. 
These transactions must meet the following conditions: 
Were created in Jan 2019 and Jan 2020 → data đang nằm ở 2 bảng fact (2019 và 2020) 
Had payment platform is android */

SELECT customer_id
, transaction_id
, scenario_id
, payment_method
, payment_platform
FROM 
( SELECT * 
FROM fact_transaction_2019 -- 396K
UNION 
SELECT * 
FROM fact_transaction_2020 ) AS fact_table
LEFT JOIN dim_platform AS platform
    ON fact_table.platform_id = platform.platform_id
LEFT JOIN dim_payment_channel AS channel 
    ON fact_table.payment_channel_id = channel.payment_channel_id
WHERE payment_platform = 'android' AND MONTH (transaction_time) = 1




/* 3.1. Paytm has a wide variety of transaction types in its business. Your manager wants to know the
contribution (by percentage) of each transaction type to total transactions. Retrieve a report that
includes the following information: transaction type, number of transaction and proportion of each
type in total. These transactions must meet the following conditions:
-Were created in 2019
-Were paid successfully
Show only the results of the top 5 types with the highest percentage of the total.*/


WITH trans_table AS (SELECT
    scen.transaction_type,
    COUNT(trans19.transaction_id) as transaction_number
FROM dbo.fact_transaction_2019 as trans19
    LEFT JOIN dbo.dim_scenario scen
    ON trans19.scenario_id = scen.scenario_id
    LEFT JOIN dbo.dim_status sta
    ON trans19.status_id = sta.status_id
WHERE status_description = 'Success'
GROUP BY scen.transaction_type)

SELECT TOP 5
    *,
    (SELECT SUM(transaction_number) FROM trans_table) as total,
    FORMAT(CAST(transaction_number as float) /
        (SELECT CAST(SUM(transaction_number) as float) FROM trans_table),'p') as contribution
FROM trans_table
ORDER BY transaction_number DESC

/* 3.2. After your manager looks at the results of these top 5 types, he wants to deep dive more to gain more
insights.

Retrieve a more detailed report with following information: transaction type, category, number of
transaction and proportion of each category in the total of that transaction type. These transactions
must meet the following conditions:
 Were created in 2019
 Were paid successfully */

WITH type_total AS(
SELECT transaction_type,
    COUNT(transaction_id) as type_transaction_number
FROM dbo.fact_transaction_2019 AS trans19
    LEFT JOIN dbo.dim_scenario AS scen
    ON  trans19.scenario_id = scen.scenario_id
    LEFT JOIN dbo.dim_status AS sta
    ON trans19.status_id = sta.status_id
WHERE status_description = 'success'
GROUP BY transaction_type),

cat_total AS (SELECT scen.transaction_type,
    category,
    COUNT(transaction_id) as category_transaction_number
FROM dbo.fact_transaction_2019 AS trans19
    LEFT JOIN dbo.dim_scenario AS scen
    ON  trans19.scenario_id = scen.scenario_id
    LEFT JOIN dbo.dim_status AS sta
    ON trans19.status_id = sta.status_id
WHERE status_description = 'success'
GROUP BY category, scen.transaction_type)

SELECT type_total.transaction_type,
    cat_total.category,
    cat_total.category_transaction_number,
    type_total.type_transaction_number,
    FORMAT(CAST(cat_total.category_transaction_number as float)/
        CAST(type_total.type_transaction_number as float),'p') as proportion
FROM type_total
    LEFT JOIN cat_total
    ON type_total.transaction_type = cat_total.transaction_type
ORDER BY transaction_type ASC, category_transaction_number DESC

/* 3.3. Paytm has acquired a lot of customers. Retrieve a report that includes the following information: the
number of transactions, the number of payment scenarios, the number of payment category and the
total of charged amount of each customer.
 Were created in 2019
 Had status description is successful
 Had transaction type is payment
 Only show Top 10 highest customers by the number of transactions */

SELECT TOP 10
    customer_id,
    COUNT(DISTINCT transaction_id) AS number_transaction,
    COUNT(DISTINCT trans19.scenario_id) AS number_payment_scenario,
    COUNT(DISTINCT scen.category) AS number_category,
    SUM(charged_amount) as total_charged_amount
FROM dbo.fact_transaction_2019 trans19
    LEFT JOIN dbo.dim_scenario scen
    ON trans19.scenario_id = scen.scenario_id
    LEFT JOIN dbo.dim_status sta
    ON trans19.status_id = sta.status_id
WHERE status_description = 'Success'
    AND transaction_type = 'Payment'
GROUP BY customer_id
ORDER BY number_transaction DESC
